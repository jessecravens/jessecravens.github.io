<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Productivity | Jesse Cravens]]></title>
  <link href="http://www.jessecravens.com/blog/categories/productivity/atom.xml" rel="self"/>
  <link href="http://www.jessecravens.com/"/>
  <updated>2015-02-17T21:49:18-06:00</updated>
  <id>http://www.jessecravens.com/</id>
  <author>
    <name><![CDATA[Jesse Cravens]]></name>
    <email><![CDATA[jesse.cravens@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RVM (Ruby Version Manager) and Ruby On Rails]]></title>
    <link href="http://www.jessecravens.com/blog/2011/09/26/rvm-ruby-version-manager-and-ruby-on-rails/"/>
    <updated>2011-09-26T23:35:58-05:00</updated>
    <id>http://www.jessecravens.com/blog/2011/09/26/rvm-ruby-version-manager-and-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>Here is a brief overview of <a href="http://beginrescueend.com">Ruby Version Manager</a> and some explanation as to why you would want to use it. I began to use RVM when I started my first Rails 3 project. It was a bit confusing at first, but now I couldn&rsquo;t live without it. I have created numerous gemsets for various configurations to include different versions of Ruby (1.87 and 1.91), versions of Rails (2.3, 3.09, 3.1) and different projects that have vastly different gems such as different testing frameworks, different JavaScript libraries, and different ORMs.</p>

<p>This allows me to essentially sandbox each of these applications' dependencies.</p>

<p>One helpful hint I might offer is to get in the habit of declaring your gemset when you launch a new terminal. I tend to have multiple terminals open at once and it took me awhile to remember that each time I launched a terminal, RVM would fall back to my default gemset. So if I clone a Rails 3.1 project, I need to remember to switch to my rails3.1 gemset prior to runninig bundle install.</p>

<p>Simply put, RVM helps:</p>

<ul>
<li>manage versions of Ruby</li>
<li>manage packages of Gemsets</li>
</ul>


<h2>RUBY</h2>

<p>{% codeblock %}</p>

<p>$ rvm list
$ rvm install 1.9.2-head</p>

<p>{% endcodeblock %}</p>

<p>And, you can set a version as default</p>

<p>{% codeblock %}</p>

<p>$ rvm use 1.9.2-head &mdash;default</p>

<p>{% endcodeblock %}</p>

<h3>GEMSETS</h3>

<p>{% codeblock %}</p>

<h1>Start by creating our gemset(s):</h1>

<p>$  rvm gemset create rails309</p>

<h1>Or create multiple at a time:</h1>

<p>$  rvm gemset create rails307 rails31</p>

<h1>The result can be verified by listing the available gemsets:</h1>

<p>$  rvm gemset list</p>

<h1>See everything with list_all, this has been very useful:</h1>

<p>$ rvm gemset list_all</p>

<h1>If a gem’s name still leaves room for confusion, simply delete it and create a more meaningful one (e.g., rails31rc):</h1>

<p>$  rvm gemset delete rails31</p>

<p>{% endcodeblock %}</p>

<p>Now that we have multiple gemsets installed, we must first select the one we want to use, and we can also set it as the default gemset by passing it the —default flag:
  
{% codeblock %}</p>

<p>$ rvm use 1.9.2-head@rails309 &mdash;default</p>

<p>{% endcodeblock %}</p>

<h3>Installing Rails</h3>

<p>Installing rails is as easy as installing any other gem: we only need to specify it’s name, but we can always choose a specific version, or to speed up the installation process by skipping the documentation:</p>

<p>{% codeblock %}</p>

<p>$ gem install rails &mdash;no-rdoc &mdash;no-ri</p>

<h1>Or</h1>

<p>$ gem install rails [-v 3.0.7] [&mdash;no-rdoc &mdash;no-ri]</p>

<h1>Or</h1>

<p>$ gem install rails -v &ldquo;>=3.1.0rc&rdquo;</p>

<p>{% endcodeblock %}</p>

<h3>In Summary and Why Am I doing this?</h3>

<p>Rails is distributed as a gem, and there are conflicts between Rails 2 and Rails 3, so if you want to run multiple versions of Rails on the same system you need to create a separate gemset for each:</p>

<p>{% codeblock %}</p>

<p>$ rvm &mdash;create 1.8.7-p302@rails2app
$ rvm &mdash;create use 1.9.2@rails3app</p>

<p>{% endcodeblock %}</p>

<p>In other words, for application specific gemsets it is convenient to select the version of Ruby and the collection of gems by doing the following:</p>

<p>{% codeblock %}</p>

<p>$ rvm &mdash;create use 1.9.2@mongoid-app</p>

<h1>Also, which gemset am I using?</h1>

<p>$ rvm gemset name</p>

<p>$ rvm gemdir</p>

<p>{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Cheatsheet]]></title>
    <link href="http://www.jessecravens.com/blog/2011/09/26/git-cheatsheet/"/>
    <updated>2011-09-26T23:10:56-05:00</updated>
    <id>http://www.jessecravens.com/blog/2011/09/26/git-cheatsheet</id>
    <content type="html"><![CDATA[<p>I made the switch from Subversion to Git awhile back, and early on I created a cheatsheet pulled from various sources on the web. I thought I&rsquo;d share.</p>

<h3>Git First-Time System Setup</h3>

<p>After installing Git, you should perform a set of one-time setup steps. These are system setups, meaning you only have to do them once per computer:</p>

<p>{% codeblock %}
$ sudo apt-get install git-core
$ git config &mdash;global user.email youremail[at symbol]example.com
$ git config &mdash;global user.name &ldquo;Your Name&rdquo;
$ git config &mdash;global alias.co checkout
{% endcodeblock %}</p>

<p>As a final setup step, you can optionally set the editor Git will use for commit messages.</p>

<p>{% codeblock %}
$ git config &mdash;global core.editor &ldquo;mate -w&rdquo;</p>

<h1>Replace “mate -w” with “gvim -f” for gVim or “mvim -f” for MacVim.</h1>

<p>{% endcodeblock %}</p>

<h3>Quick Reference – Most Often Used Commands</h3>

<p>{% codeblock %}
$ cd /path/to/repository
$ git init
$ git add .
$ git add -u
$ git log
$ git status
$ git commit -m &ldquo;initial commit&rdquo;</p>

<h1>made a mistake on the git commit</h1>

<p>$ git commit -amend -m &ldquo;initial commit&rdquo;</p>

<h1>Add the remote repository</h1>

<h1>ex 1</h1>

<p>$ git remote add unfuddle git@subdomain.unfuddle.com:subdomain/abbreviation.git</p>

<h1>ex 2</h1>

<p>$ git remote add origin git@subdomain.unfuddle.com:subdomain/abbreviation.git</p>

<h1>Configure the repository</h1>

<p>$ git config remote.unfuddle.push refs/heads/master:refs/heads/master</p>

<h1>Push master branch to remote repository named unfuddle</h1>

<p>$ git push unfuddle master</p>

<h1>Other commands:</h1>

<h1>Clone an existing remote repo</h1>

<p>$ git clone git@subdomain.unfuddle.com:subdomain/abbreviation.git</p>

<h1>List all branches within your repo</h1>

<p>$ git branch -a</p>

<h1>Create and switch to a new branch &ldquo;whatever&rdquo;</h1>

<p>$ git checkout -b whatever</p>

<p>{% endcodeblock %}</p>

<p>Those are the basics, should be enough to make you dangerous.</p>
]]></content>
  </entry>
  
</feed>
